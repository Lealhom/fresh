<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:/applicationContext.xml</param-value>
	</context-param>
		<!--  log4j设置 ——开始   -->
		<!-- 设置log4j.properties中的webapp.root，设置webAppRootKey，防止两个或两个以上项目都是用这种方式记录日志时，webapp.root被重用的问题
			   如果不在web.xml中定义 webAppRootKey参数，那么属性名就是缺省的"webapp.root"，如果有两个项目都这样配置的话，就会出现两个都为webapp.root的webAppRootKey
			 log4j所产生日志的保存路径是web application所在根目录路径
			   本项目中log4j.propertites中有如下配置：
			  log4j.appender.file.File=${webapp.root}/log4j-logs/log4j.log  
			 本机的tomcat是在F盘，所以web application所在根目录路径是F盘，则log4j的日志会保存在F:/log4j-logs/log4j.log
		 -->
		<context-param>
			<param-name>webAppRootKey</param-name>
			<param-value>fresh.root</param-value>
		</context-param>
	
	<!-- 指定loj4j配置文件log4j.properties -->
		<context-param>
			<param-name>log4jConfigLocation</param-name>
			<param-value>classpath:log4j.properties</param-value>
		</context-param>
		<context-param>
			<param-name>log4jRefreshInterval</param-name>
			<param-value>60000</param-value>
		</context-param>
		<listener>
			<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
		</listener> 
	<!--  log4j设置 ——结束   -->

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:/spring-mvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
		<description>
		</description>
		<display-name>ApiServlet</display-name>
		<servlet-name>ApiServlet</servlet-name>
		<servlet-class>com.hy.manager.web.servlet.ApiServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>ApiServlet</servlet-name>
		<url-pattern>/ApiServlet</url-pattern>
	</servlet-mapping>
	
	<welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>

</web-app>